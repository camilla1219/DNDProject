@page "/createSurvey"
@rendermode InteractiveServer

@using WebAPI.models
@using WebAPI.Services

@inject FileService SurveyService

<head>
    <link href="survey.css" rel="stylesheet" />
</head>

<PageTitle>Create Survey</PageTitle>

<div class="container">
    <!-- Left Section -->
    <div class="left-content">
        <div class="header">
            <h3>Create Survey</h3>
        </div>

        <div class="card">
            <div class="form-group field">
                <label>Title</label>
                <input type="text" placeholder="Enter Survey Title" @bind="title" @bind:event="oninput" />

                <label>Description</label>
                <input type="text" placeholder="Enter Survey Description" @bind="description" @bind:event="oninput" />
            </div>
        </div>

        <div class="questions">
            @foreach (var question in questions)
            {
                <div class="card">
                    <!-- X Button for Removing Question -->
                    <button class="remove-question-btn" @onclick="() => RemoveQuestion(question)">X</button>
                    <input type="text" placeholder="Enter Question" @bind="question.Text" @bind:event="oninput" />

                    @if (question.Type == "MultipleChoice" || question.Type == "Checkboxes")
                    {
                        <div class="options">
                            @foreach (var option in question.Options)
                            {
                                <div>
                                    @if (question.Type == "MultipleChoice")
                                    {
                                        <input type="radio" disabled />
                                    }
                                    else if (question.Type == "Checkboxes")
                                    {
                                        <input type="checkbox" disabled />
                                    }
                                    <input type="text" placeholder="Enter Option" 
                                           @bind="option.Text" @bind:event="oninput" />
                                    <button @onclick="() => RemoveOption(question, option.Id)">X</button>
                                </div>
                            }
                            <button @onclick="() => AddOption(question)" class="add-option-btn">Add Option</button>
                        </div>
                    }
                    else if (question.Type == "ShortAnswer")
                    {
                        <input type="text" placeholder="Short Answer (Respondent will type here)" disabled />
                    }
                </div>
            }
        </div>
    </div>

    <!-- Right Section (Purple Box) -->
    <div class="right-content">
        <div class="button-box">
            <!-- Dropdown and Add Button -->
            <div class="dropdown-container">
                <select @bind="selectedQuestionType">
                    <option value="MultipleChoice">Multiple Choice</option>
                    <option value="Checkboxes">Checkboxes</option>
                    <option value="ShortAnswer">Short Answer</option>
                </select>
                <button @onclick="AddQuestion" class="acceptbtn">Add Question</button>
            </div>
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    </div>
</div>

@code {
    private string title = "";
    private string description = "";
    private List<Question> questions = new List<Question>();

    private string selectedQuestionType = "MultipleChoice"; // Default option

    private async Task Create()
    {
        try
        {
            var surveys = SurveyService.LoadSurveys();
            int nextId = surveys.Any() ? surveys.Max(s => s.Id) + 1 : 1;

            var newSurvey = new Survey
            {
                Id = nextId,
                Title = title,
                Description = description,
                Questions = questions
            };

            surveys.Add(newSurvey);
            SurveyService.SaveSurveys(surveys);
            Console.WriteLine($"Survey Created: {newSurvey.Title}");
            ResetForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving survey: {ex.Message}");
        }
    }

    private void ResetForm()
    {
        title = "";
        description = "";
        questions.Clear();
    }

    private void AddQuestion()
    {
        questions.Add(new Question
        {
            Text = "",
            Type = selectedQuestionType,
            Options = selectedQuestionType == "ShortAnswer" ? null : new List<Option>()
        });
    }

    private void AddOption(Question question)
    {
        int nextOptionId = question.Options.Any() ? question.Options.Max(o => o.Id) + 1 : 1;
        question.Options.Add(new Option { Id = nextOptionId, Text = "New Option" });
    }

    private void RemoveOption(Question question, int optionId)
    {
        var option = question.Options.FirstOrDefault(o => o.Id == optionId);
        if (option != null)
        {
            question.Options.Remove(option);
            StateHasChanged();
        }
    }

    private void RemoveQuestion(Question question)
    {
        questions.Remove(question);
    }
}
